# .github/workflows/daily_xiaoyun_broadcast.yml (v2.3 - 終極動態字體偵察版)

name: Xiaoyun Daily Broadcast

on:
  schedule:
    # 每天馬來西亞/新加坡/中國/台灣時間早上 5 點執行
    # UTC+8 早上 5 點是 UTC 時間的前一天晚上 21:00
    - cron: '0 21 * * *'
  workflow_dispatch: # 允許手動觸發

jobs:
  broadcast-daily-message:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Chinese Fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk

      # <<< 終極核心步驟：動態偵察字體路徑 >>>
      - name: Find Available Font Path and Set as Environment Variable
        id: find_font
        run: |
          echo "Searching for available Noto CJK fonts in /usr/share/fonts..."
          # 使用 find 命令在 /usr/share/fonts 中搜索任何 Noto CJK 字體檔案
          # 我們優先尋找 .otf，如果沒有再找 .ttc
          # -print -quit 表示找到第一個就退出
          FONT_PATH=$(find /usr/share/fonts -name "NotoSansCJK*.otf" -print -quit)

          # 如果沒找到 .otf，就嘗試尋找 .ttc
          if [ -z "$FONT_PATH" ]; then
            echo "No .otf font found, searching for .ttc fonts..."
            FONT_PATH=$(find /usr/share/fonts -name "NotoSansCJK*.ttc" -print -quit)
          fi
          
          # 如果兩種都沒找到，就報錯並終止流程
          if [ -z "$FONT_PATH" ]; then
            echo "::error::Could not find ANY Noto CJK font file (.otf or .ttc) after installation."
            # 為了偵錯，列出所有可能的字體檔案
            echo "Listing all font files in /usr/share/fonts/opentype/noto/ for debugging:"
            ls -R /usr/share/fonts/opentype/noto/
            exit 1
          fi
          
          # 成功找到，打印出來並設定為輸出
          echo "Successfully found font at: $FONT_PATH"
          echo "font_path=$FONT_PATH" >> "$GITHUB_OUTPUT"
      # <<< 新增結束 >>>

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Xiaoyun's daily broadcast script
        env:
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OPENWEATHERMAP_API_KEY: ${{ secrets.OPENWEATHERMAP_API_KEY }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
          IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
